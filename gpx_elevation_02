<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>GPX Elevation Chart</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 1em;
      padding: 0;
      background: #f9f9f9;
    }
    input[type="file"] {
      margin-bottom: 1em;
    }
    canvas {
      max-width: 100%;
      height: auto;
    }
    .summary {
      margin-top: 1em;
      font-size: 1em;
    }
  </style>
</head>
<body>
  <h2>ðŸ“ˆ GPX Elevation Chart</h2>
  <input type="file" multiple accept=".gpx" id="gpxFiles" />
  <canvas id="elevationChart"></canvas>
  <div class="summary" id="summary"></div>

  <script>
    const chartCtx = document.getElementById('elevationChart').getContext('2d');
    const summaryDiv = document.getElementById('summary');

    let elevationChart = new Chart(chartCtx, {
      type: 'line',
      data: {
        datasets: []
      },
      options: {
        responsive: true,
        plugins: {
          legend: { position: 'top' },
          title: { display: true, text: 'Elevation Profile' }
        },
        scales: {
          x: { title: { display: true, text: 'Distance (km)' } },
          y: { title: { display: true, text: 'Elevation (m)' } }
        }
      }
    });

    document.getElementById('gpxFiles').addEventListener('change', function (event) {
      const files = event.target.files;
      summaryDiv.innerHTML = '';
      elevationChart.data.datasets = [];

      Array.from(files).forEach(file => {
        const reader = new FileReader();
        reader.onload = function () {
          const parser = new DOMParser();
          const xml = parser.parseFromString(reader.result, 'application/xml');
          const trkpts = xml.getElementsByTagName('trkpt');

          let distances = [];
          let elevations = [];
          let totalDistance = 0;
          let prevLat = null, prevLon = null;

          for (let i = 0; i < trkpts.length; i++) {
            const lat = parseFloat(trkpts[i].getAttribute('lat'));
            const lon = parseFloat(trkpts[i].getAttribute('lon'));
            const ele = parseFloat(trkpts[i].getElementsByTagName('ele')[0].textContent);

            if (prevLat !== null && prevLon !== null) {
              const d = haversine(prevLat, prevLon, lat, lon);
              totalDistance += d;
              distances.push(totalDistance);
              elevations.push(ele);
            } else {
              distances.push(0);
              elevations.push(ele);
            }

            prevLat = lat;
            prevLon = lon;
          }

          elevationChart.data.datasets.push({
            label: file.name,
            data: distances.map((d, i) => ({ x: d.toFixed(2), y: elevations[i] })),
            borderColor: getRandomColor(),
            fill: false
          });

          summaryDiv.innerHTML += `<p><strong>${file.name}</strong>: ${totalDistance.toFixed(2)} km</p>`;
          elevationChart.update();
        };
        reader.readAsText(file);
      });
    });

    function haversine(lat1, lon1, lat2, lon2) {
      const R = 6371; // km
      const dLat = (lat2 - lat1) * Math.PI / 180;
      const dLon = (lon2 - lon1) * Math.PI / 180;
      const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                Math.sin(dLon/2) * Math.sin(dLon/2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
      return R * c;
    }

    function getRandomColor() {
      return `hsl(${Math.floor(Math.random() * 360)}, 70%, 50%)`;
    }
  </script>
</body>
</html>
